{
  "openapi": "3.0.3",
  "info": {
    "title": "CS2KZ API",
    "description": "The main API for CS2KZ",
    "contact": {
      "name": "AlphaKeks",
      "email": "alphakeks@dawn.sh"
    },
    "license": {
      "name": "GPLv3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "The default response from the API.",
        "description": "The default response from the API.\n\nIf this endpoint does not respond, something is wrong.",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "The API is up.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "(͡ ͡° ͜ つ ͡͡°)"
              }
            }
          }
        }
      }
    },
    "/players": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "This endpoint allows you to fetch players.",
        "description": "This endpoint allows you to fetch players.",
        "operationId": "get_players",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about a player.",
                  "required": [
                    "steam_id",
                    "name"
                  ],
                  "properties": {
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The player's name."
                    }
                  },
                  "example": {
                    "name": "AlphaKeks",
                    "steam_id": "STEAM_1:1:161178172"
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      },
      "post": {
        "tags": [
          "Players"
        ],
        "summary": "Creates a new player.",
        "description": "Creates a new player.\n\nServers are expected to make a `GET` request for every joining player. If one of these requests\nreturns a `204` status code, the server should make a request to this endpoint to register the\nplayer.",
        "operationId": "create_player",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlayerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A resource has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "409": {
            "description": "The request conflicts with the server's state. This can happen, for example, when trying to create a resource that already exists."
          },
          "500": {
            "description": "A bug in the API."
          }
        },
        "security": [
          {
            "GameServer JWT": []
          }
        ]
      }
    },
    "/players/{ident}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "This endpoint allows you to fetch a single player by their SteamID or (parts of their) name.",
        "description": "This endpoint allows you to fetch a single player by their SteamID or (parts of their) name.",
        "operationId": "get_player_by_ident",
        "parameters": [
          {
            "name": "ident",
            "in": "path",
            "description": "A player's SteamID or name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about a player.",
                  "required": [
                    "steam_id",
                    "name"
                  ],
                  "properties": {
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The player's name."
                    }
                  },
                  "example": {
                    "name": "AlphaKeks",
                    "steam_id": "STEAM_1:1:161178172"
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/players/{steam_id}": {
      "patch": {
        "tags": [
          "Players"
        ],
        "summary": "Updates a player.",
        "description": "Updates a player.\n\nThis route is reserved for CS2KZ servers!\n\nEvery time a map change happens, the server should make a request to this endpoint for every\nplayer currently on the server.\n\nEvery time a player disconnects, the server should make a request to this endpoint for that\nplayer.",
        "operationId": "update_player",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "description": "The player's SteamID.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "500": {
            "description": "A bug in the API."
          }
        },
        "security": [
          {
            "GameServer JWT": []
          }
        ]
      }
    },
    "/maps": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "This endpoint allows you to fetch globally approved maps.",
        "description": "This endpoint allows you to fetch globally approved maps.",
        "operationId": "get_maps",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The map's name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mapper",
            "in": "query",
            "description": "A player's SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Only include maps created after this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Only include maps created before this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about a map.",
                  "required": [
                    "id",
                    "workshop_id",
                    "name",
                    "mappers",
                    "courses",
                    "filesize",
                    "created_on",
                    "updated_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's Steam Workshop ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of the players who created this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of courses on this map."
                    },
                    "filesize": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The filesize of this map in bytes.",
                      "minimum": 0
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when this map was initially approved."
                    },
                    "updated_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when this map was last updated."
                    }
                  },
                  "example": {
                    "courses": [
                      {
                        "filters": [
                          {
                            "id": 1,
                            "mode": "kz_classic",
                            "ranked_status": "ranked",
                            "teleports": true,
                            "tier": 3
                          },
                          {
                            "id": 2,
                            "mode": "kz_classic",
                            "ranked_status": "ranked",
                            "teleports": false,
                            "tier": 4
                          }
                        ],
                        "id": 1,
                        "mappers": [
                          {
                            "name": "GameChaos",
                            "steam_id": "STEAM_1:0:102468802"
                          }
                        ],
                        "stage": 0
                      }
                    ],
                    "created_on": "2023-12-10T10:41:01Z",
                    "filesize": 190335000,
                    "id": 1,
                    "mappers": [
                      {
                        "name": "GameChaos",
                        "steam_id": "STEAM_1:0:102468802"
                      }
                    ],
                    "name": "kz_checkmate",
                    "updated_on": "2023-12-10T10:41:01Z",
                    "workshop_id": 3070194623
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      },
      "post": {
        "tags": [
          "Maps"
        ],
        "summary": "This endpoint is used for creating new maps.",
        "description": "This endpoint is used for creating new maps.\n\nIt is intended to be used by admins and the map approval team.",
        "operationId": "create_map",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A resource has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created map.",
                  "required": [
                    "map_id"
                  ],
                  "properties": {
                    "map_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    }
                  },
                  "example": {
                    "map_id": 1
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "409": {
            "description": "The request conflicts with the server's state. This can happen, for example, when trying to create a resource that already exists."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/maps/{ident}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "This endpoint allows you to fetch a single map by its ID or (parts of its) name.",
        "description": "This endpoint allows you to fetch a single map by its ID or (parts of its) name.",
        "operationId": "get_map_by_ident",
        "parameters": [
          {
            "name": "ident",
            "in": "path",
            "description": "The map's ID or name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MapIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about a map.",
                  "required": [
                    "id",
                    "workshop_id",
                    "name",
                    "mappers",
                    "courses",
                    "filesize",
                    "created_on",
                    "updated_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's Steam Workshop ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of the players who created this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of courses on this map."
                    },
                    "filesize": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The filesize of this map in bytes.",
                      "minimum": 0
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when this map was initially approved."
                    },
                    "updated_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when this map was last updated."
                    }
                  },
                  "example": {
                    "courses": [
                      {
                        "filters": [
                          {
                            "id": 1,
                            "mode": "kz_classic",
                            "ranked_status": "ranked",
                            "teleports": true,
                            "tier": 3
                          },
                          {
                            "id": 2,
                            "mode": "kz_classic",
                            "ranked_status": "ranked",
                            "teleports": false,
                            "tier": 4
                          }
                        ],
                        "id": 1,
                        "mappers": [
                          {
                            "name": "GameChaos",
                            "steam_id": "STEAM_1:0:102468802"
                          }
                        ],
                        "stage": 0
                      }
                    ],
                    "created_on": "2023-12-10T10:41:01Z",
                    "filesize": 190335000,
                    "id": 1,
                    "mappers": [
                      {
                        "name": "GameChaos",
                        "steam_id": "STEAM_1:0:102468802"
                      }
                    ],
                    "name": "kz_checkmate",
                    "updated_on": "2023-12-10T10:41:01Z",
                    "workshop_id": 3070194623
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/maps/{id}": {
      "patch": {
        "tags": [
          "Maps"
        ],
        "summary": "This endpoint is used for updating maps.",
        "description": "This endpoint is used for updating maps.\n\nIt is intended to be used by admins and the map approval team.",
        "operationId": "update_map",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the map you wish to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "409": {
            "description": "The request conflicts with the server's state. This can happen, for example, when trying to create a resource that already exists."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/maps/workshop/{id}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "This endpoint allows you to fetch a map by its Steam Workshop ID.",
        "description": "This endpoint allows you to fetch a map by its Steam Workshop ID.",
        "operationId": "get_map_by_workshop_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The map's Steam Workshop ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about a map.",
                  "required": [
                    "id",
                    "workshop_id",
                    "name",
                    "mappers",
                    "courses",
                    "filesize",
                    "created_on",
                    "updated_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's Steam Workshop ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of the players who created this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of courses on this map."
                    },
                    "filesize": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The filesize of this map in bytes.",
                      "minimum": 0
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when this map was initially approved."
                    },
                    "updated_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when this map was last updated."
                    }
                  },
                  "example": {
                    "courses": [
                      {
                        "filters": [
                          {
                            "id": 1,
                            "mode": "kz_classic",
                            "ranked_status": "ranked",
                            "teleports": true,
                            "tier": 3
                          },
                          {
                            "id": 2,
                            "mode": "kz_classic",
                            "ranked_status": "ranked",
                            "teleports": false,
                            "tier": 4
                          }
                        ],
                        "id": 1,
                        "mappers": [
                          {
                            "name": "GameChaos",
                            "steam_id": "STEAM_1:0:102468802"
                          }
                        ],
                        "stage": 0
                      }
                    ],
                    "created_on": "2023-12-10T10:41:01Z",
                    "filesize": 190335000,
                    "id": 1,
                    "mappers": [
                      {
                        "name": "GameChaos",
                        "steam_id": "STEAM_1:0:102468802"
                      }
                    ],
                    "name": "kz_checkmate",
                    "updated_on": "2023-12-10T10:41:01Z",
                    "workshop_id": 3070194623
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "This endpoint allows you to fetch servers.",
        "description": "This endpoint allows you to fetch servers.",
        "operationId": "get_servers",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the server.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "owned_by",
            "in": "query",
            "description": "Only include servers owned by this player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "approved",
            "in": "query",
            "description": "Only include servers that are (not) approved (have an API key).",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about a server.",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owned_by",
                    "approved_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The server's name."
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The server's IP address and port."
                    },
                    "owned_by": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "approved_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this server was approved."
                    }
                  },
                  "example": {
                    "approved_on": "2023-12-10T10:41:01Z",
                    "id": 1,
                    "ip_address": "255.255.255.255:1337",
                    "name": "Alpha's KZ",
                    "owned_by": {
                      "name": "AlphaKeks",
                      "steam_id": "STEAM_1:1:161178172"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      },
      "post": {
        "tags": [
          "Servers"
        ],
        "summary": "This endpoint is used for creating new servers.",
        "description": "This endpoint is used for creating new servers.\n\nIt is intended to be used by admins and one-time-use tokens given to players.",
        "operationId": "create_server",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A resource has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created server.",
                  "required": [
                    "server_id"
                  ],
                  "properties": {
                    "server_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    }
                  },
                  "example": {
                    "server_id": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "409": {
            "description": "The request conflicts with the server's state. This can happen, for example, when trying to create a resource that already exists."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/servers/{ident}": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "This endpoint allows you to fetch a single server by its ID or (parts of its) name.",
        "description": "This endpoint allows you to fetch a single server by its ID or (parts of its) name.",
        "operationId": "get_server_by_ident",
        "parameters": [
          {
            "name": "ident",
            "in": "path",
            "description": "A server's ID or name.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about a server.",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owned_by",
                    "approved_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The server's name."
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The server's IP address and port."
                    },
                    "owned_by": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "approved_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this server was approved."
                    }
                  },
                  "example": {
                    "approved_on": "2023-12-10T10:41:01Z",
                    "id": 1,
                    "ip_address": "255.255.255.255:1337",
                    "name": "Alpha's KZ",
                    "owned_by": {
                      "name": "AlphaKeks",
                      "steam_id": "STEAM_1:1:161178172"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/servers/{id}": {
      "patch": {
        "tags": [
          "Servers"
        ],
        "summary": "This endpoint allows you to update a single server by its ID.",
        "description": "This endpoint allows you to update a single server by its ID.",
        "operationId": "update_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A server's ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/jumpstats": {
      "get": {
        "tags": [
          "Jumpstats"
        ],
        "summary": "This endpoint allows you to fetch jumpstats.",
        "description": "This endpoint allows you to fetch jumpstats.",
        "operationId": "get_jumpstats",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Jumpstat"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "minimum_distance",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Mode"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "style",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Style"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "player",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A jumpstat.",
                  "required": [
                    "id",
                    "kind",
                    "mode",
                    "style",
                    "strafes",
                    "distance",
                    "sync",
                    "pre",
                    "max",
                    "overlap",
                    "bad_air",
                    "dead_air",
                    "height",
                    "airpath",
                    "deviation",
                    "average_width",
                    "airtime",
                    "player",
                    "server",
                    "plugin_version",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0
                    },
                    "kind": {
                      "$ref": "#/components/schemas/Jumpstat"
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "style": {
                      "$ref": "#/components/schemas/Style"
                    },
                    "strafes": {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0
                    },
                    "distance": {
                      "type": "number",
                      "format": "double"
                    },
                    "sync": {
                      "type": "number",
                      "format": "double"
                    },
                    "pre": {
                      "type": "number",
                      "format": "double"
                    },
                    "max": {
                      "type": "number",
                      "format": "double"
                    },
                    "overlap": {
                      "type": "number",
                      "format": "double"
                    },
                    "bad_air": {
                      "type": "number",
                      "format": "double"
                    },
                    "dead_air": {
                      "type": "number",
                      "format": "double"
                    },
                    "height": {
                      "type": "number",
                      "format": "double"
                    },
                    "airpath": {
                      "type": "number",
                      "format": "double"
                    },
                    "deviation": {
                      "type": "number",
                      "format": "double"
                    },
                    "average_width": {
                      "type": "number",
                      "format": "double"
                    },
                    "airtime": {
                      "type": "number",
                      "format": "double"
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerSummary"
                    },
                    "plugin_version": {
                      "type": "string"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "example": {
                    "created_on": "2023-12-10T10:41:01Z",
                    "distance": 269.7274,
                    "id": 1,
                    "kind": "longjump",
                    "mode": "kz_classic",
                    "player": {
                      "name": "AlphaKeks",
                      "steam_id": "STEAM_1:1:161178172"
                    },
                    "server": {
                      "id": 1,
                      "name": "Alpha's KZ"
                    },
                    "style": "normal"
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      },
      "post": {
        "tags": [
          "Jumpstats"
        ],
        "summary": "This endpoint is used by servers to send jumpstats.",
        "description": "This endpoint is used by servers to send jumpstats.\n\nServers are supposed to fetch the player's PBs when they join and only make requests to this\nroute with new PBs, but the endpoint will still validate the jumpstat, so it is expected to\nreturn a 409 occasionally.",
        "operationId": "create_jumpstat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJumpstatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A resource has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A new jumpstat.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The jumpstat's ID.",
                      "minimum": 0
                    }
                  },
                  "example": {
                    "id": 69420
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "409": {
            "description": "The request conflicts with the server's state. This can happen, for example, when trying to create a resource that already exists."
          },
          "500": {
            "description": "A bug in the API."
          }
        },
        "security": [
          {
            "GameServer JWT": []
          }
        ]
      }
    },
    "/records": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "This endpoint allows you to fetch records.",
        "description": "This endpoint allows you to fetch records.",
        "operationId": "get_records",
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "map",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ record.",
                  "required": [
                    "id",
                    "player",
                    "course",
                    "teleports",
                    "server",
                    "bhop_stats",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The record's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "course": {
                      "$ref": "#/components/schemas/CourseWithFilter"
                    },
                    "teleports": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The amount of teleports used in this run.",
                      "minimum": 0
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerSummary"
                    },
                    "bhop_stats": {
                      "$ref": "#/components/schemas/BhopStats"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this record was set."
                    }
                  },
                  "example": {
                    "bhop_stats": {
                      "bhops_tick0": 100,
                      "bhops_tick1": 100,
                      "bhops_tick2": 30,
                      "bhops_tick3": 10,
                      "bhops_tick4": 10,
                      "bhops_tick5": 0,
                      "bhops_tick6": 0,
                      "bhops_tick7": 0,
                      "bhops_tick8": 0,
                      "perfs": 200
                    },
                    "course": {
                      "id": 1,
                      "map_id": 1,
                      "map_name": "kz_checkmate",
                      "map_stage": 1,
                      "mode": "kz_classic",
                      "style": "normal",
                      "tier": 3
                    },
                    "created_on": "2023-12-10T10:41:01Z",
                    "id": 1,
                    "player": {
                      "name": "AlphaKeks",
                      "steam_id": "STEAM_1:1:161178172"
                    },
                    "server": {
                      "id": 1,
                      "name": "Alpha's KZ"
                    },
                    "teleports": 69
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      },
      "post": {
        "tags": [
          "Records"
        ],
        "summary": "This endpoint is used by servers to send records.",
        "description": "This endpoint is used by servers to send records.",
        "operationId": "create_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A resource has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A new record.",
                  "required": [
                    "record_id"
                  ],
                  "properties": {
                    "record_id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The record's ID.",
                      "minimum": 0
                    }
                  },
                  "example": {
                    "record_id": 69420
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "409": {
            "description": "The request conflicts with the server's state. This can happen, for example, when trying to create a resource that already exists."
          },
          "500": {
            "description": "A bug in the API."
          }
        },
        "security": [
          {
            "GameServer JWT": []
          }
        ]
      }
    },
    "/bans": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "This endpoint allows you to fetch bans.",
        "description": "This endpoint allows you to fetch bans.",
        "operationId": "get_bans",
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "banned_by",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "expired",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ record.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "reason": {
                      "type": "string",
                      "description": "The reason for the ban."
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ServerSummary"
                        }
                      ],
                      "nullable": true
                    },
                    "banned_by": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Player"
                        }
                      ],
                      "nullable": true
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was issued."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.",
                      "nullable": true
                    }
                  },
                  "example": {
                    "created_on": "2023-12-10T10:41:01Z",
                    "id": 1,
                    "player": {
                      "name": "AlphaKeks",
                      "steam_id": "STEAM_1:1:161178172"
                    },
                    "reason": "bhop_hack",
                    "server": {
                      "id": 1,
                      "name": "Alpha's KZ"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "There was no data available for the given query."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "This endpoint is used by servers to refresh their JWTs.",
        "description": "This endpoint is used by servers to refresh their JWTs.",
        "operationId": "refresh_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A resource has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This data is sent by servers to refresh their JWT.",
                  "required": [
                    "token"
                  ],
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          },
          "500": {
            "description": "A bug in the API."
          }
        }
      }
    },
    "/auth/steam/login": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "This is where the frontend will redirect users to when they click \"login\".",
        "description": "This is where the frontend will redirect users to when they click \"login\".\nSteam will redirect them back to the API to confirm their identity.",
        "operationId": "login",
        "parameters": [
          {
            "name": "origin_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "This is a redirect."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          }
        }
      }
    },
    "/auth/steam/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "This is where Steam will redirect a user back to after logging in.",
        "description": "This is where Steam will redirect a user back to after logging in.\nWe verify that the request actually comes from steam and give the user a cookie containing\na JWT.",
        "operationId": "callback",
        "responses": {
          "303": {
            "description": "This is a redirect."
          },
          "400": {
            "description": "Required request data was missing / invalid."
          },
          "401": {
            "description": "You do not have access to this resource."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthRequest": {
        "type": "object",
        "description": "This data is sent by servers to refresh their JWT.",
        "required": [
          "api_key",
          "plugin_version"
        ],
        "properties": {
          "api_key": {
            "type": "integer",
            "format": "uint32",
            "description": "The server's \"permanent\" API key.",
            "minimum": 0
          },
          "plugin_version": {
            "type": "string",
            "description": "The CS2KZ version the server is currently running."
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "description": "This data is sent by servers to refresh their JWT.",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "Ban": {
        "type": "object",
        "description": "A KZ record.",
        "required": [
          "id",
          "player",
          "reason",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The ban's ID.",
            "minimum": 0
          },
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the ban."
          },
          "server": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerSummary"
              }
            ],
            "nullable": true
          },
          "banned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban was issued."
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban will expire.",
            "nullable": true
          }
        },
        "example": {
          "created_on": "2023-12-10T10:41:01Z",
          "id": 1,
          "player": {
            "name": "AlphaKeks",
            "steam_id": "STEAM_1:1:161178172"
          },
          "reason": "bhop_hack",
          "server": {
            "id": 1,
            "name": "Alpha's KZ"
          }
        }
      },
      "BhopStats": {
        "type": "object",
        "required": [
          "perfs",
          "bhops_tick0",
          "bhops_tick1",
          "bhops_tick2",
          "bhops_tick3",
          "bhops_tick4",
          "bhops_tick5",
          "bhops_tick6",
          "bhops_tick7",
          "bhops_tick8"
        ],
        "properties": {
          "perfs": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick0": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick1": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick2": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick3": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick4": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick5": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick6": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick7": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick8": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        }
      },
      "Course": {
        "type": "object",
        "description": "Information about a course.",
        "required": [
          "id",
          "stage",
          "mappers",
          "filters"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The stage of the map this course corresponds to.",
            "minimum": 0
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of the players who created this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "List of filters that apply to this course."
          }
        },
        "example": {
          "filters": [
            {
              "id": 1,
              "mode": "kz_classic",
              "ranked_status": "ranked",
              "teleports": true,
              "tier": 3
            },
            {
              "id": 2,
              "mode": "kz_classic",
              "ranked_status": "ranked",
              "teleports": false,
              "tier": 4
            }
          ],
          "id": 1,
          "mappers": [
            {
              "name": "GameChaos",
              "steam_id": "STEAM_1:0:102468802"
            }
          ],
          "stage": 0
        }
      },
      "CourseUpdate": {
        "type": "object",
        "description": "An update to a course.",
        "required": [
          "course_id"
        ],
        "properties": {
          "course_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of new mappers.",
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of old mappers to be removed.",
            "nullable": true
          },
          "filter_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterUpdate"
            },
            "description": "List of updates for existing filters.",
            "nullable": true
          }
        },
        "example": {
          "added_mappers": [
            "STEAM_1:0:102468802"
          ],
          "course_id": 1
        }
      },
      "CourseWithFilter": {
        "type": "object",
        "description": "Combination of a course and filter.",
        "required": [
          "id",
          "map_id",
          "map_name",
          "map_stage",
          "mode",
          "style",
          "tier"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "map_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The ID of the map the course belongs to.",
            "minimum": 0
          },
          "map_name": {
            "type": "string",
            "description": "The name of the map the course belongs to."
          },
          "map_stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The stage of the map this course corresponds to.",
            "minimum": 0
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          }
        }
      },
      "CreateCourseParams": {
        "type": "object",
        "description": "A new course.",
        "required": [
          "stage",
          "mappers",
          "filters"
        ],
        "properties": {
          "stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The stage of the map this course corresponds to.",
            "minimum": 0
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of the players who created this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateFilterParams"
            },
            "description": "List of filters that apply to this course."
          }
        },
        "example": {
          "filters": [
            {
              "mode": "kz_classic",
              "ranked_status": "ranked",
              "teleports": true,
              "tier": 3
            },
            {
              "mode": "kz_classic",
              "ranked_status": "ranked",
              "teleports": false,
              "tier": 4
            }
          ],
          "mappers": [
            "STEAM_1:0:102468802"
          ],
          "stage": 0
        }
      },
      "CreateFilterParams": {
        "type": "object",
        "description": "A new filter.",
        "required": [
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter applies to runs with teleports."
          },
          "tier": {
            "type": "integer",
            "format": "uint8",
            "description": "The difficulty of the course with this filter.",
            "maximum": 10,
            "minimum": 1
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          }
        },
        "example": {
          "mode": "kz_classic",
          "ranked_status": "ranked",
          "teleports": true,
          "tier": 3
        }
      },
      "CreateJumpstatRequest": {
        "type": "object",
        "description": "A jumpstat.",
        "required": [
          "steam_id",
          "kind",
          "mode",
          "style",
          "strafes",
          "distance",
          "sync",
          "pre",
          "max",
          "overlap",
          "bad_air",
          "dead_air",
          "height",
          "airpath",
          "deviation",
          "average_width",
          "airtime"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "kind": {
            "$ref": "#/components/schemas/Jumpstat"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "strafes": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "distance": {
            "type": "number",
            "format": "double"
          },
          "sync": {
            "type": "number",
            "format": "double"
          },
          "pre": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "overlap": {
            "type": "number",
            "format": "double"
          },
          "bad_air": {
            "type": "number",
            "format": "double"
          },
          "dead_air": {
            "type": "number",
            "format": "double"
          },
          "height": {
            "type": "number",
            "format": "double"
          },
          "airpath": {
            "type": "number",
            "format": "double"
          },
          "deviation": {
            "type": "number",
            "format": "double"
          },
          "average_width": {
            "type": "number",
            "format": "double"
          },
          "airtime": {
            "type": "number",
            "format": "double"
          }
        },
        "example": {
          "distance": 230.3418,
          "kind": "longjump",
          "mode": "kz_vanilla",
          "style": "backwards"
        }
      },
      "CreateMapRequest": {
        "type": "object",
        "description": "A new map.",
        "required": [
          "workshop_id",
          "mappers",
          "courses"
        ],
        "properties": {
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's Steam Workshop ID.",
            "minimum": 0
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of players who have contributed to creating this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCourseParams"
            },
            "description": "List of courses on this map."
          }
        },
        "example": {
          "courses": [
            {
              "filters": [
                {
                  "mode": "kz_classic",
                  "ranked_status": "ranked",
                  "teleports": true,
                  "tier": 3
                },
                {
                  "mode": "kz_classic",
                  "ranked_status": "ranked",
                  "teleports": false,
                  "tier": 4
                }
              ],
              "mappers": [
                "STEAM_1:0:102468802"
              ],
              "stage": 0
            }
          ],
          "mappers": [
            "STEAM_1:0:102468802"
          ],
          "workshop_id": 3070194623
        }
      },
      "CreateMapResponse": {
        "type": "object",
        "description": "A newly created map.",
        "required": [
          "map_id"
        ],
        "properties": {
          "map_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The map's ID.",
            "minimum": 0
          }
        },
        "example": {
          "map_id": 1
        }
      },
      "CreatePlayerRequest": {
        "type": "object",
        "description": "A new player.\n\nThis is expected to be sent by a CS2KZ server when a player joins for the first time.",
        "required": [
          "steam_id",
          "name",
          "ip_address"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          }
        },
        "example": {
          "ip_address": "255.255.255.255",
          "name": "AlphaKeks",
          "steam_id": "STEAM_1:1:161178172"
        }
      },
      "CreateRecordRequest": {
        "type": "object",
        "description": "A record.",
        "required": [
          "steam_id",
          "map_id",
          "map_stage",
          "mode",
          "style",
          "teleports",
          "time",
          "bhop_stats"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "map_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The ID of the map the record was set on.",
            "minimum": 0
          },
          "map_stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The stage the record was set on.",
            "minimum": 0
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "teleports": {
            "type": "integer",
            "format": "uint32",
            "description": "The amount of teleports used for setting this record.",
            "minimum": 0
          },
          "time": {
            "type": "number",
            "format": "double",
            "description": "The time taken to finish this run."
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          }
        },
        "example": {
          "bhop_stats": {
            "bhops_tick0": 100,
            "bhops_tick1": 100,
            "bhops_tick2": 30,
            "bhops_tick3": 10,
            "bhops_tick4": 10,
            "bhops_tick5": 0,
            "bhops_tick6": 0,
            "bhops_tick7": 0,
            "bhops_tick8": 0,
            "perfs": 200
          },
          "map_id": 1,
          "map_stage": 1,
          "mode": "kz_vanilla",
          "steam_id": "STEAM_1:1:161178172",
          "style": "normal",
          "teleports": 69,
          "time": 420.69
        }
      },
      "CreateServerRequest": {
        "type": "object",
        "description": "A new server.",
        "required": [
          "name",
          "ip_address",
          "owned_by"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The server's IP address and port."
          },
          "owned_by": {
            "$ref": "#/components/schemas/SteamID"
          }
        },
        "example": {
          "ip_address": "255.255.255.255:1337",
          "name": "Alpha's KZ",
          "owned_by": "STEAM_1:1:161178172"
        }
      },
      "CreateServerResponse": {
        "type": "object",
        "description": "A newly created server.",
        "required": [
          "server_id"
        ],
        "properties": {
          "server_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          }
        },
        "example": {
          "server_id": 1
        }
      },
      "CreatedJumpstatResponse": {
        "type": "object",
        "description": "A new jumpstat.",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The jumpstat's ID.",
            "minimum": 0
          }
        },
        "example": {
          "id": 69420
        }
      },
      "CreatedRecordResponse": {
        "type": "object",
        "description": "A new record.",
        "required": [
          "record_id"
        ],
        "properties": {
          "record_id": {
            "type": "integer",
            "format": "uint64",
            "description": "The record's ID.",
            "minimum": 0
          }
        },
        "example": {
          "record_id": 69420
        }
      },
      "Filter": {
        "type": "object",
        "description": "Information about a course filter.",
        "required": [
          "id",
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The filter's ID.",
            "minimum": 0
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter applies to runs with teleports."
          },
          "tier": {
            "type": "integer",
            "format": "uint8",
            "description": "The difficulty of the course with this filter.",
            "maximum": 10,
            "minimum": 1
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          }
        },
        "example": {
          "id": 1,
          "mode": "kz_classic",
          "ranked_status": "ranked",
          "teleports": true,
          "tier": 3
        }
      },
      "FilterUpdate": {
        "type": "object",
        "description": "An update to a filter.",
        "required": [
          "filter_id"
        ],
        "properties": {
          "filter_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The filter's ID.",
            "minimum": 0
          },
          "tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tier"
              }
            ],
            "nullable": true
          },
          "ranked_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RankedStatus"
              }
            ],
            "nullable": true
          }
        },
        "example": {
          "filter_id": 1,
          "tier": 7
        }
      },
      "Jumpstat": {
        "type": "string",
        "enum": [
          "longjump",
          "single_bhop",
          "multi_bhop",
          "weirdjump",
          "ladderjump",
          "ladderhop"
        ]
      },
      "JumpstatResponse": {
        "type": "object",
        "description": "A jumpstat.",
        "required": [
          "id",
          "kind",
          "mode",
          "style",
          "strafes",
          "distance",
          "sync",
          "pre",
          "max",
          "overlap",
          "bad_air",
          "dead_air",
          "height",
          "airpath",
          "deviation",
          "average_width",
          "airtime",
          "player",
          "server",
          "plugin_version",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "kind": {
            "$ref": "#/components/schemas/Jumpstat"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "strafes": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "distance": {
            "type": "number",
            "format": "double"
          },
          "sync": {
            "type": "number",
            "format": "double"
          },
          "pre": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "overlap": {
            "type": "number",
            "format": "double"
          },
          "bad_air": {
            "type": "number",
            "format": "double"
          },
          "dead_air": {
            "type": "number",
            "format": "double"
          },
          "height": {
            "type": "number",
            "format": "double"
          },
          "airpath": {
            "type": "number",
            "format": "double"
          },
          "deviation": {
            "type": "number",
            "format": "double"
          },
          "average_width": {
            "type": "number",
            "format": "double"
          },
          "airtime": {
            "type": "number",
            "format": "double"
          },
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "server": {
            "$ref": "#/components/schemas/ServerSummary"
          },
          "plugin_version": {
            "type": "string"
          },
          "created_on": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "created_on": "2023-12-10T10:41:01Z",
          "distance": 269.7274,
          "id": 1,
          "kind": "longjump",
          "mode": "kz_classic",
          "player": {
            "name": "AlphaKeks",
            "steam_id": "STEAM_1:1:161178172"
          },
          "server": {
            "id": 1,
            "name": "Alpha's KZ"
          },
          "style": "normal"
        }
      },
      "KZMap": {
        "type": "object",
        "description": "Information about a map.",
        "required": [
          "id",
          "workshop_id",
          "name",
          "mappers",
          "courses",
          "filesize",
          "created_on",
          "updated_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The map's ID.",
            "minimum": 0
          },
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's Steam Workshop ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The map's name."
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of the players who created this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Course"
            },
            "description": "List of courses on this map."
          },
          "filesize": {
            "type": "integer",
            "format": "uint64",
            "description": "The filesize of this map in bytes.",
            "minimum": 0
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this map was initially approved."
          },
          "updated_on": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this map was last updated."
          }
        },
        "example": {
          "courses": [
            {
              "filters": [
                {
                  "id": 1,
                  "mode": "kz_classic",
                  "ranked_status": "ranked",
                  "teleports": true,
                  "tier": 3
                },
                {
                  "id": 2,
                  "mode": "kz_classic",
                  "ranked_status": "ranked",
                  "teleports": false,
                  "tier": 4
                }
              ],
              "id": 1,
              "mappers": [
                {
                  "name": "GameChaos",
                  "steam_id": "STEAM_1:0:102468802"
                }
              ],
              "stage": 0
            }
          ],
          "created_on": "2023-12-10T10:41:01Z",
          "filesize": 190335000,
          "id": 1,
          "mappers": [
            {
              "name": "GameChaos",
              "steam_id": "STEAM_1:0:102468802"
            }
          ],
          "name": "kz_checkmate",
          "updated_on": "2023-12-10T10:41:01Z",
          "workshop_id": 3070194623
        }
      },
      "MapIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          {
            "type": "string"
          }
        ]
      },
      "Mode": {
        "type": "string",
        "enum": [
          "kz_vanilla",
          "kz_classic"
        ]
      },
      "Player": {
        "type": "object",
        "description": "Information about a player.",
        "required": [
          "steam_id",
          "name"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's name."
          }
        },
        "example": {
          "name": "AlphaKeks",
          "steam_id": "STEAM_1:1:161178172"
        }
      },
      "PlayerIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SteamID"
          },
          {
            "type": "string"
          }
        ]
      },
      "RankedStatus": {
        "type": "string",
        "description": "The ranked status of a [Filter].",
        "enum": [
          "never",
          "unranked",
          "ranked"
        ]
      },
      "Record": {
        "type": "object",
        "description": "A KZ record.",
        "required": [
          "id",
          "player",
          "course",
          "teleports",
          "server",
          "bhop_stats",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The record's ID.",
            "minimum": 0
          },
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "course": {
            "$ref": "#/components/schemas/CourseWithFilter"
          },
          "teleports": {
            "type": "integer",
            "format": "uint32",
            "description": "The amount of teleports used in this run.",
            "minimum": 0
          },
          "server": {
            "$ref": "#/components/schemas/ServerSummary"
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this record was set."
          }
        },
        "example": {
          "bhop_stats": {
            "bhops_tick0": 100,
            "bhops_tick1": 100,
            "bhops_tick2": 30,
            "bhops_tick3": 10,
            "bhops_tick4": 10,
            "bhops_tick5": 0,
            "bhops_tick6": 0,
            "bhops_tick7": 0,
            "bhops_tick8": 0,
            "perfs": 200
          },
          "course": {
            "id": 1,
            "map_id": 1,
            "map_name": "kz_checkmate",
            "map_stage": 1,
            "mode": "kz_classic",
            "style": "normal",
            "tier": 3
          },
          "created_on": "2023-12-10T10:41:01Z",
          "id": 1,
          "player": {
            "name": "AlphaKeks",
            "steam_id": "STEAM_1:1:161178172"
          },
          "server": {
            "id": 1,
            "name": "Alpha's KZ"
          },
          "teleports": 69
        }
      },
      "Server": {
        "type": "object",
        "description": "Information about a server.",
        "required": [
          "id",
          "name",
          "ip_address",
          "owned_by",
          "approved_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The server's IP address and port."
          },
          "owned_by": {
            "$ref": "#/components/schemas/Player"
          },
          "approved_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this server was approved."
          }
        },
        "example": {
          "approved_on": "2023-12-10T10:41:01Z",
          "id": 1,
          "ip_address": "255.255.255.255:1337",
          "name": "Alpha's KZ",
          "owned_by": {
            "name": "AlphaKeks",
            "steam_id": "STEAM_1:1:161178172"
          }
        }
      },
      "ServerIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          {
            "type": "string"
          }
        ]
      },
      "ServerSummary": {
        "type": "object",
        "description": "A server ID and name.",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The server's name."
          }
        },
        "example": {
          "id": 1,
          "name": "Alpha's KZ"
        }
      },
      "Session": {
        "type": "object",
        "description": "A player session.\n\nThis route is reserved for CS2KZ servers!\n\nAnytime a player connects, a session is started. This session ends either when the map changes\nor when the player disconnects.",
        "required": [
          "time_active",
          "time_spectating",
          "time_afk",
          "perfs",
          "bhops_tick0",
          "bhops_tick1",
          "bhops_tick2",
          "bhops_tick3",
          "bhops_tick4",
          "bhops_tick5",
          "bhops_tick6",
          "bhops_tick7",
          "bhops_tick8"
        ],
        "properties": {
          "time_active": {
            "type": "string"
          },
          "time_spectating": {
            "type": "string"
          },
          "time_afk": {
            "type": "string"
          },
          "perfs": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick0": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick1": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick2": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick3": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick4": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick5": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick6": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick7": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "bhops_tick8": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "example": {
          "bhops_tick0": 100,
          "bhops_tick1": 100,
          "bhops_tick2": 30,
          "bhops_tick3": 10,
          "bhops_tick4": 10,
          "bhops_tick5": 0,
          "bhops_tick6": 0,
          "bhops_tick7": 0,
          "bhops_tick8": 0,
          "perfs": 250,
          "time_active": 600,
          "time_afk": 900,
          "time_spectating": 51
        }
      },
      "SteamID": {
        "type": "string"
      },
      "Style": {
        "type": "string",
        "enum": [
          "normal",
          "backwards",
          "sideways",
          "wonly"
        ]
      },
      "Tier": {
        "type": "string",
        "enum": [
          "very_easy",
          "easy",
          "medium",
          "advanced",
          "hard",
          "very_hard",
          "extreme",
          "death",
          "unfeasible",
          "impossible"
        ]
      },
      "UpdateMapRequest": {
        "type": "object",
        "description": "A map udpate.",
        "properties": {
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's new Steam Workshop ID.",
            "nullable": true,
            "minimum": 0
          },
          "name": {
            "type": "boolean",
            "description": "Update the map's name to the Workshop's version."
          },
          "filesize": {
            "type": "boolean",
            "description": "Update the map's filesize to the Workshop's value."
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of new mappers.",
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of old mappers to be removed.",
            "nullable": true
          },
          "added_courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCourseParams"
            },
            "description": "List of new courses.",
            "nullable": true
          },
          "removed_courses": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            },
            "description": "List of course IDs to be removed.",
            "nullable": true
          },
          "course_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseUpdate"
            },
            "description": "List of updates to existing courses.",
            "nullable": true
          }
        },
        "example": {
          "name": "kz_checkmate_v2_final_fix_global_new"
        }
      },
      "UpdatePlayerRequest": {
        "type": "object",
        "description": "An update to a player.",
        "required": [
          "session"
        ],
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "nullable": true
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          }
        },
        "example": {
          "ip_address": "255.255.255.255",
          "name": "AlphaKeks",
          "session": {
            "bhops_tick0": 100,
            "bhops_tick1": 100,
            "bhops_tick2": 30,
            "bhops_tick3": 10,
            "bhops_tick4": 10,
            "bhops_tick5": 0,
            "bhops_tick6": 0,
            "bhops_tick7": 0,
            "bhops_tick8": 0,
            "perfs": 200,
            "time_active": 600,
            "time_afk": 900,
            "time_spectating": 51
          }
        }
      },
      "UpdateServerRequest": {
        "type": "object",
        "description": "A server update.",
        "required": [
          "ip_address"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The server's new name.",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "The server's new IP address."
          },
          "port": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's new port.",
            "nullable": true,
            "minimum": 0
          },
          "owned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SteamID"
              }
            ],
            "nullable": true
          }
        },
        "example": {
          "ip_address": "255.255.255.255",
          "name": "Alpha's KZ",
          "owned_by": "STEAM_1:1:161178172",
          "port": 1337
        }
      }
    },
    "securitySchemes": {
      "GameServer JWT": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
